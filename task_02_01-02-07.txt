1. Почему код дает именно такие результаты?
var a = 1, b = 1, c, d;
c = ++a; alert(c);           // 2 - к перменной а применяется префиксный инкремент, выражение возвращает значение переменной после её инкрементирования (2)
d = b++; alert(d);           // 1 - к перменной b применяется постфиксный инкремент, выражение возвращает значение переменной до её инкрементирования (1), 
                                    но при последующих обращениях к переменной в ней уже будет значение 2
c = (2+ ++a); alert(c);      // 5 - после предыдущего инкрементирования значение переменной а равно 2, 
                                    используется префиксный инкремент, выражение вернёт уже увеличенное значение, следовательно получаем 2 + 3 = 5
d = (2+ b++); alert(d);      // 4 - после предыдущего инкрементирования значение переменной а равно 2, используется постфиксный инкремент, 
                                    значит выражение вернёт ещё не увеличенное значение, то есть получаем 2 + 2 = 4
alert(a);                    // 3 - начальное значение переменной равно 1, она инкрементирована 2 раза, 1 + 1 + 1 = 3
alert(b);                    // 3 - начальное значение переменной равно 1, она инкрементирована 2 раза, 1 + 1 + 1 = 3


2. Чему будет равен x? 
var a = 2;
var x = 1 + (a *= 2);

x будет равен 5. 
Выражение a *= 2 эквивалентно выражению a = a * 2, то есть в данном случае a *= 2 вернёт 4. 
Получаем 4 + 1 = 5

7. Сравнить null и 0. Объяснить результат.
null == 0 // false
null === 0 // false
0 - это число, вполне конкретное и определённоe, относящееся к числовому типу данных. 
А null - это пустое значение, ничего, пустота (и к тому же отдельный тип данных). 
Никакое значение не может быть равно пустому значению, поэтому сравнения с null всегда возвращают false.
(В дополнение стоит заметить, что null всегда является одним и тем же фиксированным объектом в памяти,
поэтому null == null // true, хотя с математической точки зрения это не верно)
